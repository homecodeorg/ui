{"global":{"Size":{"value":"'s' | 'm' | 'l'","isPlain":true},"Variant":{"value":"'clean' | 'default' | 'outlined'","isPlain":true},"ComponentType":{"kind":"type","className":{"value":"string","optional":true}},"FormFieldChangeHandler":{"kind":"type","value":"(  e: ChangeEvent | null,  value: any) => void | boolean;"},"Date":{"kind":"type","year":{"value":"number"},"month":{"value":"number"},"day":{"value":"number","optional":true},"ISO":{"value":"string","comment":"ISO 8601 string representation of date (YYYY-MM-DD)","optional":true}}},"AssistiveText":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLDivElement>"],"className":{"value":"string","optional":true},"size":{"value":"'s' | 'm' | 'l'","enum":["'s'","'m'","'l';"],"optional":true},"variant":{"value":"'default' | 'danger'","enum":["'default'","'danger';"],"optional":true},"children":{"value":"ReactNode"}}},"Autocomplete":{"Option":{"kind":"type","id":{"value":"string"},"label":{"value":"string"},"render":{"value":"(option: Option) => React.ReactNode","optional":true}},"Value":{"value":"string","isPlain":true},"Props":{"kind":"type","ext":["FormControl<Value, HTMLInputElement>"],"className":{"value":"string","optional":true},"inputWrapperClassName":{"value":"string","optional":true},"size":{"value":"Size","optional":true},"value":{"value":"Value"},"getOptions":{"value":"(value: Value) => Promise<Option[]>"},"onSelect":{"value":"(option: Option) => void"},"debounceDelay":{"value":"number","optional":true},"inputProps":{"value":"Partial<InputProps>","optional":true},"popupProps":{"value":"Partial<PopupProps>","optional":true},"menuProps":{"value":"Partial<MenuProps>","optional":true},"round":{"value":"boolean","optional":true},"blur":{"value":"boolean","optional":true}}},"Button":{"Props":{"kind":"type","ext":["ButtonHTMLAttributes<HTMLButtonElement>"],"className":{"value":"string","comment":"CSS class name(s) to be applied to the component","optional":true},"children":{"value":"ReactNode","comment":"Text or child elements to be displayed inside the button"},"variant":{"value":"'text' | 'clear' | 'default' | 'outlined' | 'primary'","comment":"Style variant of the button","enum":["'text'","'clear'","'default'","'outlined'","'primary';"],"optional":true},"size":{"value":"Size","comment":"Size of the button","optional":true},"loading":{"value":"boolean","comment":"Whether the button should be in a loading state","optional":true},"checked":{"value":"boolean","comment":"Whether the button should be in a checked state","optional":true},"square":{"value":"boolean","comment":"Whether the button should have a square shape","optional":true},"round":{"value":"boolean","comment":"Whether the button should have a round corners","optional":true},"prefixElem":{"value":"ReactNode","comment":"Element to be prepended to the children","optional":true},"postfixElem":{"value":"ReactNode","comment":"Element to be appended to the children","optional":true},"onRef":{"value":"(ref: HTMLButtonElement) => void","comment":"Callback to get the button's ref","optional":true}}},"ButtonGroup":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLDivElement>"],"children":{"value":"React.ReactNode"},"className":{"value":"string","optional":true}}},"Calendar":{"Day":{"kind":"type","ext":["Date"],"currentMonth":{"value":"boolean","optional":true}},"DayProps":{"kind":"type","className":{"value":"string"},"onPointerDown":{"value":"() => void","optional":true},"onPointerUp":{"value":"() => void","optional":true}},"Props":{"kind":"type","className":{"value":"string","optional":true},"value":{"value":"Date"},"onDayPointerDown":{"value":"(value: Date) => void","optional":true},"onDayPointerUp":{"value":"(value: Date) => void","optional":true},"startOfWeek":{"value":"number","comment":"Day of week to start calendar from  1(Monday)..0(Sunday). Default: 1","optional":true},"size":{"value":"Size","optional":true},"renderDay":{"value":"(day: Day, dayProps: DayProps) => ReactNode","comment":"Function to render custom day. If not provided, then default day will be rendered.\nNOTE: `classes` needs for applying styles of default layout.","optional":true},"renderWeekDayLabel":{"value":"(day: number) => ReactNode","comment":"Function to render custom week days label","optional":true},"renderYearLabel":{"value":"(year: number) => string","comment":"Function to render custom year label","optional":true},"renderMonthesLabel":{"value":"(month: number) => string","comment":"Function to render custom monthes label","optional":true},"renderMonthLabel":{"value":"(month: number) => string","comment":"Function to render custom each month label","optional":true},"weekendClassName":{"value":"string","comment":"Class name for weekend days","optional":true},"hideOtherMonthDays":{"value":"boolean","comment":"Do not render last days of previous month and first days of next month.","optional":true},"isDayDisabled":{"value":"(day: Day) => boolean","comment":"Function to check if day is disabled","optional":true}}},"Checkbox":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLInputElement>"],"label":{"value":"ReactNode","comment":"Used to associate the checkbox with its label.\nThis allows users to click on the label instead of the small checkbox,\nwhich can be especially helpful for users with mobility or vision impairments.\n\nIt can also improve the SEO of the page,\nas search engines can use the label text to better understand the content of the page.","optional":true},"checked":{"value":"boolean","comment":"Whether the checkbox is currently selected","optional":true},"disabled":{"value":"boolean","comment":"Whether the checkbox is disabled","optional":true},"error":{"value":"string | boolean","comment":"Defines an error message or error status for the input field","enum":["string","boolean;"],"optional":true},"size":{"value":"Size","comment":"Size of the checkbox","optional":true},"variant":{"value":"'default' | 'outlined'","enum":["'default'","'outlined';"],"optional":true}}},"Container":{"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"'s' | 'm' | 'l' | 'xl'","enum":["'s'","'m'","'l'","'xl';"],"optional":true},"children":{"value":"any"},"alignItemsCenter":{"value":"boolean","optional":true},"justifyContentCenter":{"value":"boolean","optional":true},"vertical":{"value":"boolean","optional":true},"fullHeight":{"value":"boolean | string","enum":["boolean","string;"],"optional":true},"fullWidth":{"value":"boolean | string","enum":["boolean","string;"],"optional":true},"scrolledX":{"value":"boolean","optional":true},"scrolledY":{"value":"boolean","optional":true},"style":{"value":"Partial<CSSStyleDeclaration>","optional":true}}},"DatePicker":{"Value":{"value":"string | [string, string]","isPlain":true},"Props":{"kind":"type","className":{"value":"string","optional":true},"value":{"value":"Value","comment":"Date or range of dates. If range is provided, then control will be in range selection mode."},"onChange":{"value":"(value: Value) => void"},"size":{"value":"Size","optional":true},"doubleCalendar":{"value":"boolean","comment":"Whether to display two calendars (only for range type).","optional":true},"calendarProps":{"value":"Partial<CalendarProps>","comment":"Props to pass to [Calendar](//components/Calendar) component.","optional":true}}},"DatePickerInput":{"Value":{"value":"string | [string, string]","isPlain":true},"Props":{"kind":"type","ext":["DatePickerProps"],"variant":{"value":"string","optional":true},"displayFormat":{"value":"string"},"popupProps":{"value":"PopupProps","optional":true},"buttonProps":{"value":"Omit<ButtonProps, 'children'>","optional":true}}},"DateTime":{"Props":{"kind":"type","value":{"value":"Date | Moment | string","comment":"Date and time to display.\n\nIf no value is provided, the component will default to the current date and time.","enum":["Date","Moment","string;"],"optional":true},"format":{"value":"string","comment":"Format in which to display the date and time.\n\nIf no format is provided, the component will display the date and time using the default format.\n\nSee [moment.js/format](https://momentjs.com/docs/#/displaying/format) for more details.","optional":true},"locale":{"value":"string","comment":"locale in which to display the date and time. If no locale is provided, the component will default to 'en' (English).","optional":true}}},"Draggable":{"Props":{"kind":"type","items":{"value":"string[]"},"className":{"value":"string","optional":true},"itemClassName":{"value":"string","optional":true},"disabled":{"value":"boolean","comment":"Whether the draggable items are disabled","optional":true},"renderItem":{"value":"(id: string, index: number, isActive: boolean) => ReactNode","comment":"Callback to render each item\n- id: The id from items array\n- isActive: Whether the item is being dragged"},"onDragStart":{"value":"(id: string) => void","comment":"mode: 'swap' | 'push'\nCalled when dragging starts","optional":true},"onDragEnd":{"value":"(id: string) => void","comment":"Called when dragging ends","optional":true},"onChange":{"value":"(items: string[]) => void","comment":"Called when the order of items changes"},"children":{"value":"ReactNode","comment":"Additional children to render","optional":true}}},"Expand":{"ContentProps":{"value":"HTMLAttributes<HTMLDivElement> & { className?: string }","isPlain":true},"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"Size","optional":true},"isOpen":{"value":"boolean"},"header":{"value":"ReactNode"},"headerClassName":{"value":"string","optional":true},"content":{"value":"(props: ContentProps) => ReactNode | ReactNode","enum":["(props: ContentProps) => ReactNode","ReactNode;"]},"contentProps":{"value":"ContentProps","optional":true},"onChange":{"value":"(isOpen: boolean) => void","optional":true}}},"Form":{"FormValidationSchema":{"value":"ValidationSchema","isPlain":true},"FormValues":{"value":"Record<string, any>","isPlain":true},"FieldError":{"kind":"type","type":{"value":"string","comment":"error type"},"message":{"value":"string"},"expected":{"value":"boolean","optional":true},"actual":{"value":"boolean","optional":true}},"FieldsFlags":{"value":"Record<string, boolean>","isPlain":true},"FieldsErrors":{"value":"Record<string, FieldError>","isPlain":true},"ValidationStateParams":{"kind":"type","values":{"value":"FormValues"},"disabled":{"value":"FieldsFlags"}},"ValidationState":{"kind":"type","isValid":{"value":"boolean","comment":"Whether the form is currently valid."},"errors":{"value":"FieldsErrors","comment":"Validation errors for the form fields."}},"FormAPI":{"kind":"type","ext":["ValidationState"],"isDirty":{"value":"boolean","comment":"Whether any form field values have changed."},"isLoading":{"value":"boolean","comment":"Whether the form is currently submitting."},"values":{"value":"FormValues","comment":"Current form field values"},"touched":{"value":"FieldsFlags","comment":"Whether each form field has been touched by the user."},"changed":{"value":"FieldsFlags","comment":"Whether each form field value has changed."},"setValue":{"value":"(field: string, val: any) => void","comment":"Set the value of a specific form field."},"setValues":{"value":"(values: FormValues) => void","comment":"Set the values of all form fields."},"reset":{"value":"() => void","comment":"Reset the form to its initial state."},"Field":{"value":"(props: FormFieldProps) => ReactNode","comment":"React component used to render individual form fields."}},"FormValidationRule":{"kind":"type","type":{"value":"string","optional":true},"check":{"value":"(value: any,schema: FormValidationSchema,values: FormValues) => boolean;","optional":true},"messages":{"value":"{ [id: string]: string }","optional":true}},"Props":{"kind":"type","ext":["ComponentType"],"defaultValues":{"value":"FormValues","comment":"Default values for the form fields.","optional":true},"initialValues":{"value":"FormValues","comment":"Initial values for the form fields."},"defaultDisabled":{"value":"FieldsFlags","comment":"@deprecated","optional":true},"validationSchema":{"value":"FormValidationSchema","comment":"Schema for validating the form fields.\nThis schema is defined using the [fastest-validator](https://www.npmjs.com/package/fastest-validator) library.","optional":true},"markEdited":{"value":"boolean","comment":"Mark fields as edited when they are changed.","optional":true},"children":{"value":"(api: FormAPI) => ReactNode | ReactNode[]","comment":"Render prop function that receives the form API as an argument and returns the form custom layout for the form fields.","enum":["(api: FormAPI) => ReactNode","ReactNode[];"]},"onInit":{"value":"(api: FormAPI) => boolean | void","comment":"Called after the form is initialized.","enum":["(api: FormAPI) => boolean","void;"],"optional":true},"onChange":{"value":"(values: FormValues) => void | boolean","comment":"Called whenever the form values change and receives the current form values as an argument.\nReturn false to prevent the form from changes.","enum":["(values: FormValues) => void","boolean;"],"optional":true},"onSubmit":{"value":"(values: FormValues) => Promise<void>","comment":"Called when the form is submitted and receives the current form values as an argument\n\nIt should return a promise that resolves when the submission is complete to properly update isLoading state.","optional":true}},"FieldProps":{"kind":"type","name":{"value":"string","comment":"Name of the form field.\n\nUsed to manage states the form field, such as value, error, touched, changed, etc."},"className":{"value":"string","optional":true},"onChange":{"value":"FormFieldChangeHandler"},"e":{"value":"FocusEvent): boolean | void","comment":"Called when the form field is lost focus.\n\nIf the function returns false, the field will not be marked as touched.","enum":["FocusEvent): boolean","void;"]},"markEdited":{"value":"Props['markEdited']","comment":"Whether to display the dot indicating that the field has been edited.","optional":true},"value":{"value":"any"},"isHidden":{"value":"boolean","comment":"Do not render component if true."},"component":{"value":"(props: FormFieldProps) => ReactNode","comment":"Component used to render the form field.","optional":true},"children":{"value":"ReactNode","comment":"Additional content to render below the form field.","optional":true}},"FormFieldProps":{"kind":"type","ext":["FieldProps"],"value":{"value":"any","comment":"Current value."},"error":{"value":"ValidationError","comment":"Validation error."},"isChanged":{"value":"boolean","comment":"Whether the form field value has changed."},"isTouched":{"value":"boolean","comment":"Whether the form field has been touched by the user."},"clearMargins":{"value":"boolean","comment":"Every form field has margin-top to separate it from the previous field.\n\nUse clearMargins:false to remove margins from the form field."},"handleChange":{"value":"(name: string, val: any) => void","comment":"Called when the form field value changes."},"handleBlur":{"value":"(name: string) => void","comment":"Called when the form field is lost focus."}}},"Gallery":{"Props":{"kind":"type","ext":["ComponentType"],"items":{"value":"string[]","comment":"Items to be displayed in the gallery."},"size":{"value":"Size","optional":true},"animation":{"value":"boolean","comment":"Whether to enable animation when transitioning between items in the gallery.","optional":true},"startIndex":{"value":"number","comment":"Index of the item to display first in the gallery.\n\nIf no index is provided, the first item in the items array will be displayed.","optional":true},"showArrows":{"value":"boolean","comment":"Whether to display arrows to navigate between items in the gallery.","optional":true},"showDots":{"value":"boolean","comment":"Whether to display dots indicating the number of items in the gallery and which item is currently active.","optional":true},"initialBounce":{"value":"boolean","comment":"Whether to play a bounce animation on initialize.","optional":true},"cover":{"value":"true","comment":"Item will be displayed as cover, which means it will be stretched to cover the whole height and width of the gallery."},"onChange":{"value":"(index: number, item: string) => void","comment":"Called when the active item in the gallery changes.","optional":true}}},"Heading":{"Props":{"kind":"type","id":{"value":"string"},"text":{"value":"ReactNode"}}},"Icon":{"IconSize":{"value":"'xs' | Size","isPlain":true},"IconType":{"value":"keyof typeof CUSTOM_ICONS","isPlain":true},"Props":{"kind":"type","ext":["ComponentType"],"icon":{"value":"React.ComponentType<React.SVGProps<SVGSVGElement>>","optional":true},"type":{"value":"IconType","optional":true},"size":{"value":"IconSize"}}},"Input":{"ControlProps":{"value":"HTMLProps<HTMLInputElement>","isPlain":true},"Value":{"value":"string | number","isPlain":true},"Props":{"kind":"type","ext":["Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>"],"name":{"value":"string","optional":true},"step":{"value":"number","comment":"Step value for number inputs","optional":true},"size":{"value":"Size","optional":true},"label":{"value":"string","optional":true},"variant":{"value":"Variant","optional":true},"round":{"value":"boolean","optional":true},"autoFocus":{"value":"boolean","comment":"Whether the input field should be focused when the component is mounted","optional":true},"hideRequiredStar":{"value":"boolean","comment":"Hide the required star symbol","optional":true},"forceLabelOnTop":{"value":"boolean","comment":"For label to be on top of the input,\neven if there is no value/placeholder and not focused","optional":true},"error":{"value":"string | boolean","comment":"Defines an error message or error status for the input field","enum":["string","boolean;"],"optional":true},"hasClear":{"value":"boolean","comment":"Whether the input field should include a clear button that clears the input value when clicked","optional":true},"changeOnEnd":{"value":"boolean","comment":"Whether the onChange event should be triggered only when the user finishes typing (focus lost) or immediately after each keystroke (default)","optional":true},"addonLeft":{"value":"string | ReactNode","comment":"Addon to be displayed to the left of the input field","enum":["string","ReactNode;"],"optional":true},"addonLeftClassName":{"value":"string","optional":true},"addonRight":{"value":"string | ReactNode","comment":"Addon to be displayed to the right of the input field","enum":["string","ReactNode;"],"optional":true},"addonRightClassName":{"value":"string","optional":true},"clearPaddingLeft":{"value":"boolean","comment":"Whether to clear the padding of the input field to the left","optional":true},"clearPaddingRight":{"value":"boolean","comment":"Whether to clear the padding of the input field to the right","optional":true},"onClear":{"value":"() => void","comment":"A callback function that is called when the input field's value is cleared using the clear button (if hasClear is true)","optional":true},"controlProps":{"value":"ControlProps & ComponentType","comment":"Additional props for the underlying HTML input element","optional":true},"checkAutofill":{"value":"boolean","comment":"Whether to check for autofill values and update the input field's value accordingly","optional":true},"scrollProps":{"value":"Partial<ScrollProps>","comment":"In case of type=textarea, you can pass props for [Scroll|//components/Scroll] component","optional":true}}},"InputFile":{"ProgressParams":{"kind":"type","loaded":{"value":"number"},"total":{"value":"number"}},"UploaderParams":{"kind":"type","file":{"value":"File"},"fn":{"value":"(ProgressParams) => void"},"getXHR":{"value":"(XMLHttpRequest) => void","optional":true}},"Uploader":{"value":"(UploaderParams) => Promise<string>","isPlain":true},"Accept":{"value":"HTMLProps<HTMLInputElement>['accept']","isPlain":true},"Value":{"value":"string[]","isPlain":true},"Props":{"kind":"type","className":{"value":"string","optional":true},"label":{"value":"string","optional":true},"size":{"value":"Size","optional":true},"variant":{"value":"'default' | 'outlined'","enum":["'default'","'outlined';"],"optional":true},"draggable":{"value":"boolean","comment":"Whether the user can drag files to change the order of the list.","optional":true},"upload":{"value":"Uploader","comment":"Function that uploads the selected file and returns a Promise that\nresolves with the URL of the uploaded file.\n\nIt takes three arguments:\n- file - A File object representing the file to be uploaded.\n- fn - A callback function that is called with an object containing the loaded and total progress values during the upload process.\n- getXHR (optional) - A function that is called with an XMLHttpRequest object representing the underlying request. This can be used to set custom headers or other options on the request."},"uploadOnDemand":{"value":"(Uploader) => void","comment":"Callback that allows the caller to trigger an upload of selected files.\n\nIt takes a function as an argument, which should be called with the upload function as its argument.\n\nThis function can be used to trigger an upload after the user has made their selections.","optional":true},"accept":{"value":"Accept","optional":true},"limit":{"value":"number","comment":"Maximum file size allowed in megabytes","optional":true},"maxCount":{"value":"number","comment":"Maximum number of files allowed to be uploaded","optional":true},"value":{"value":"Value","comment":"URLs of uploaded files","optional":true},"onSelect":{"value":"(files: File[]) => void","comment":"Callback that is called when the upload is complete.\nIt takes two arguments:\n- e - ChangeEvent\n- value - URLs of uploaded files","optional":true},"onChange":{"value":"FormFieldChangeHandler","comment":"Callback that is called with an array of File objects representing the selected file(s)."},"remove":{"value":"(fileName: string) => Promise<boolean>","comment":"A function that removes the file from the server.\nIt takes a string representing the name of the file to be removed and returns a Promise that resolves with a boolean value indicating whether the removal was successful or not","optional":true}}},"Label":{"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"string","optional":true},"children":{"value":"string"},"isOnTop":{"value":"boolean"},"isError":{"value":"boolean","optional":true},"onClipPathChange":{"value":"(clipPath: string) => void","optional":true}}},"Lazy":{"ImportData":{"value":"Record<string | 'default', any>","isPlain":true},"Loader":{"value":"() => Promise<ImportData>","isPlain":true},"RenderFunction":{"value":"(importData: ImportData) => ReactNode","isPlain":true},"Props":{"kind":"type","loader":{"value":"Loader","comment":"Function that returns a Promise which resolves to the content to be lazy loaded."},"render":{"value":"RenderFunction","comment":"Function that will be called with the loaded node (same as children).","optional":true},"children":{"value":"ReactNode | RenderFunction","comment":"Children that will be rendered.","enum":["ReactNode","RenderFunction;"],"optional":true},"spinnerTimeout":{"value":"number","comment":"Timeout for the Spinner.","optional":true},"size":{"value":"Size","comment":"Size of the Spinner","optional":true},"progressElem":{"value":"ReactNode","comment":"Element that will be rendered while the content is loading.","optional":true},"hideSpinner":{"value":"boolean","comment":"Whether to hide the Spinner while the content is loading.","optional":true}},"State":{"value":"{ loading: boolean; spinnerTimeout: boolean }","isPlain":true}},"LightBox":{"Props":{"kind":"type","className":{"value":"string","optional":true},"isOpen":{"value":"boolean","comment":"Whether the lightbox is open.","optional":true},"onClose":{"value":"() => void","comment":"Called when the lightbox is closed.\n\nBy default it closed by pressing Esc key.","optional":true},"children":{"value":"ReactNode","comment":"The content to display in the lightbox."},"blur":{"value":"boolean","comment":"Applies a blur effect to the background.","optional":true}}},"Menu":{},"Notifications":{"NotificationType":{"value":"'warning' | 'danger' | 'loading'","isPlain":true},"Id":{"value":"string","isPlain":true},"ItemParams":{"kind":"type","type":{"value":"NotificationType","optional":true},"title":{"value":"string","optional":true},"content":{"value":"string","optional":true},"autoHide":{"value":"boolean","optional":true}},"Methods":{"kind":"type","show":{"value":"(data: ItemParams) => Id","comment":"Show a notification based on the given params.\n\nReturns the id of the notification that can be used for close(id) and remove(id) methods."},"pause":{"value":"() => void","comment":"Will pause hiding the notification.\n\nBy default hover on notification item will set to pause."},"unpause":{"value":"() => void","comment":"Will resume to the timeouts to hide the notification."},"close":{"value":"(id: Id) => void","comment":"Gracefully hide the notification with an animation."},"remove":{"value":"(id: Id) => void","comment":"Immediately remove the notification without any animation."}},"ItemProps":{"kind":"type","ext":["ItemParams"],"id":{"value":"string"},"visible":{"value":"boolean"}}},"Paranja":{"Props":{"kind":"type","children":{"value":"ReactNode","optional":true},"className":{"value":"string","optional":true},"visible":{"value":"boolean","optional":true},"inline":{"value":"boolean","comment":"Disable render to portal","optional":true},"blur":{"value":"boolean","comment":"Applies a blur effect to the background.","optional":true}}},"Popup":{"TriggerPropsType":{"kind":"type","ext":["DetailedHTMLProps<  HTMLAttributes<HTMLDivElement>,  HTMLDivElement>"],"className":{"value":"string","optional":true}},"WrapperPropsType":{"kind":"type","ext":["DetailedHTMLProps<  HTMLAttributes<HTMLDivElement>,  HTMLDivElement>"],"className":{"value":"string","optional":true}},"Props":{"kind":"type","ext":["ComponentType"],"isOpen":{"value":"boolean","comment":"Sets the initial open state (default is false)","optional":true},"animated":{"value":"boolean","comment":"Wether to animate open/close state","optional":true},"hoverControl":{"value":"boolean","comment":"Toggle open/close state on pointerover/pointerout","optional":true},"focusControl":{"value":"boolean","comment":"Toggle open/close state on focus/blur\n\nAlso by pressing Enter/Space keys, when focus on trigger","optional":true},"disabled":{"value":"boolean","comment":"Disable rendering and listening events","optional":true},"outlined":{"value":"boolean","comment":"Adds an outline","optional":true},"inline":{"value":"boolean","comment":"Renders inline with its trigger element","optional":true},"paranja":{"value":"boolean","comment":"Adds a backdrop behind","optional":true},"blur":{"value":"boolean","comment":"Applies a blur effect to the background.","optional":true},"round":{"value":"boolean","comment":"Adds a round border to the popup.","optional":true},"size":{"value":"Size","comment":"Set corresponding paddings and border-radius","optional":true},"elevation":{"value":"1 | 2","comment":"Adds a shadow","enum":["1","2;"],"optional":true},"offset":{"value":"{ top?: number; right?: number; bottom?: number; left?: number }","comment":"Offset from trigger element","optional":true},"direction":{"value":"Direction","comment":"Direction to open.\n\nIf not specified, it will be automatically calculated.\n\nAlso when size of content changes, it will be recalculated.","optional":true},"trigger":{"value":"ReactNode","comment":"Target element to attach to","optional":true},"triggerProps":{"value":"TriggerPropsType","optional":true},"wrapperProps":{"value":"WrapperPropsType","comment":"Props for element that wraps content","optional":true},"content":{"value":"ReactNode","comment":"Content to render inside popup"},"contentProps":{"value":"any","optional":true},"onOpen":{"value":"() => void","comment":"Function called when the popup is opened","optional":true},"onAfterOpen":{"value":"() => void","comment":"Function called after the popup is opened\nIf animated is true, it will be called after the animation is finished","optional":true},"onClose":{"value":"() => void","comment":"Function called when the popup is closed","optional":true},"onAfterClose":{"value":"() => void","comment":"Function called after the popup is closed\nIf animated is true, it will be called after the animation is finished","optional":true}},"State":{"kind":"type","isOpen":{"value":"boolean"},"isContentVisible":{"value":"boolean"}}},"PopupMenu":{"Item":{"kind":"type","ext":["Pick<ButtonProps, 'onClick'>"],"id":{"value":"string"},"title":{"value":"ReactNode"},"className":{"value":"string","optional":true}},"Props":{"kind":"type","ext":["Omit<PopupProps, 'content'>"],"trigger":{"value":"ReactNode"},"items":{"value":"Item[]"},"onClose":{"value":"() => void","optional":true}}},"Progress":{},"ProgressCircular":{},"RequiredStar":{"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"IconSize","optional":true},"inline":{"value":"boolean","optional":true}}},"Link":{"Props":{"kind":"type","ext":["HTMLProps<HTMLAnchorElement>"],"store":{"value":"any","optional":true},"exactClassName":{"value":"string","comment":"CSS class name that will be added to the link when it is active.","optional":true},"isPartialExact":{"value":"boolean","comment":"Whether the link should be considered active if the current URL partially matches the link's destination URL.","optional":true},"isDisabled":{"value":"boolean","comment":"Whether the link should be disabled and unclickable.","optional":true},"disableExternalIcon":{"value":"boolean","comment":"Whether the link should be rendered without external icon.","optional":true},"isClear":{"value":"boolean","comment":"Whether the link should be rendered without underline.","optional":true},"inline":{"value":"boolean","comment":"Whether the link should be rendered without paddings.","optional":true},"onClick":{"value":"(e: MouseEvent<HTMLAnchorElement>, href: string) => void","comment":"Called when the link is clicked.","optional":true}}},"Router":{"AnyProps":{"value":"Record<string, any>","isPlain":true},"ComponentType":{"value":"FC<AnyProps> | typeof Component<AnyProps>","isPlain":true},"RedirectProps":{"kind":"type","to":{"value":"string"}},"RouteProps":{"kind":"type","className":{"value":"string","optional":true},"path":{"value":"string"},"queryParam":{"value":"string","comment":"Name of query param to match route","optional":true},"component":{"value":"ComponentType"},"exact":{"value":"boolean","optional":true},"ext":["Partial<RedirectProps>"]},"Props":{"kind":"type","store":{"value":"any","optional":true},"children":{"value":"ReactNode","comment":"Every child of Router component must have `path` property."},"basePath":{"value":"string","comment":"Used in [Link](//components/Link) component to generate correct href for relative paths.","optional":true},"single":{"value":"boolean","comment":"Render first matched route.","optional":true}}},"Scroll":{"OffsetAxis":{"value":"{ before?: number; after?: number }","isPlain":true},"Offset":{"value":"{ x?: OffsetAxis; y?: OffsetAxis }","isPlain":true},"Props":{"kind":"type","ext":["ComponentType"],"innerClassName":{"value":"string","comment":"CSS class to apply to the inner container element","optional":true},"thumbClassName":{"value":"string","comment":"CSS class to apply to the scrollbar thumb element","optional":true},"xScrollbarClassName":{"value":"string","comment":"CSS class to apply to the horizontal scrollbar element","optional":true},"yScrollbarClassName":{"value":"string","comment":"CSS class to apply to the vertical scrollbar element","optional":true},"innerProps":{"value":"HTMLAttributes<HTMLDivElement>","comment":"Additional HTML attributes to apply to the inner container element","optional":true},"onInnerRef":{"value":"(ref: HTMLDivElement | null) => void","comment":"Callback to get a reference to the inner container element","enum":["(ref: HTMLDivElement","null) => void;"],"optional":true},"x":{"value":"boolean","comment":"Whether to enable horizontal scrolling.","optional":true},"y":{"value":"boolean","comment":"Whether to enable vertical scrolling.","optional":true},"size":{"value":"Size","comment":"Scrollbars size.","optional":true},"fadeSize":{"value":"Size","comment":"Content fade size.","optional":true},"smooth":{"value":"boolean","comment":"Enables scroll-behavior smooth (default false).","optional":true},"autoHide":{"value":"boolean","comment":"Whether to automatically hide the scrollbar when not in use (default false).","optional":true},"offset":{"value":"Offset","comment":"Offset to apply to the scrollbar.","optional":true},"onScroll":{"value":"(e: React.UIEvent<HTMLDivElement>) => void","comment":"Called when the <Scroll> component is scrolled.","optional":true},"children":{"value":"ReactNode"}}},"Select":{"Id":{"value":"string | number","isPlain":true},"Option":{"kind":"type","id":{"value":"Id"},"isGroupHeader":{"value":"boolean","optional":true},"parentId":{"value":"Id","optional":true},"label":{"value":"string"},"sortingKey":{"value":"string | number","enum":["string","number;"],"optional":true},"children":{"value":"Option[]","optional":true},"render":{"value":"(label: string) => string","optional":true}},"Preset":{"kind":"type","label":{"value":"string"},"ids":{"value":"Id[]"}},"PresetButtonProps":{"kind":"type","key":{"value":"string"},"children":{"value":"ReactNode"},"onClick":{"value":"() => void"}},"SelectPopupProps":{"kind":"type","value":"Omit<  PopupProps,  | 'disabled'  | 'direction'  | 'autoClose'  | 'onOpen'  | 'onClose'  | 'trigger'  | 'content'> &  Partial<{ direction: PopupProps['direction'] }>;"},"Selected":{"value":"Record<string, true | Id[]>","isPlain":true},"Value":{"value":"Id | Id[] | null","isPlain":true},"InheritedInputProps":{"value":"Partial<Pick<InputProps, 'onFocus' | 'onBlur'>>","isPlain":true},"Props":{"kind":"type","ext":["FormControl<Value>"],"className":{"value":"string","optional":true},"isOpen":{"value":"boolean","comment":"Use this prop to control the open state","optional":true},"closeOnSelect":{"value":"boolean","comment":"Whether to close the popup when an option is selected","optional":true},"optionsClassName":{"value":"string","comment":"CSS class for styling the list items wrapper","optional":true},"optionClassName":{"value":"string","comment":"CSS class that will be applied to every list options","optional":true},"additionalLabel":{"value":"ReactNode","comment":"ReactNode that will be added to to label","optional":true},"size":{"value":"Size","optional":true},"variant":{"value":"'default' | 'outlined'","enum":["'default'","'outlined';"],"optional":true},"showSelectedCount":{"value":"boolean","comment":"Show the number of selected items in the label","optional":true},"disableLabel":{"value":"boolean","comment":"Disabled label rendering","optional":true},"blur":{"value":"boolean","comment":"Applies a blur effect to the options list","optional":true},"options":{"value":"Option[]","comment":"An array of options"},"additionalOptions":{"value":"Option[]","comment":"Options that would be added to the top of the list","optional":true},"presets":{"value":"Preset[]","comment":"Presets are a set of options that can be selected with a single click","optional":true},"clearButton":{"value":"boolean","comment":"Show clear button","optional":true},"selectAllButton":{"value":"boolean","comment":"Show select all button","optional":true},"value":{"value":"Value","comment":"Id(s) of selected item(s)\n\nPass array for multiple selection","optional":true},"searchValue":{"value":"string","comment":"Control search input value","optional":true},"expandSelected":{"value":"boolean","comment":"Expand selected items on first open","optional":true},"onChange":{"value":"(value: Value) => void"},"onSearchChange":{"value":"(value: string) => void","optional":true},"onOpen":{"value":"() => void","optional":true},"onClose":{"value":"() => void","optional":true},"isSearchable":{"value":"boolean","comment":"Whether to show the search input field","optional":true},"inputProps":{"value":"Omit<InputProps,'value' | 'onChange' | 'onFocus' | 'onBlur' | 'size'>;","comment":"Props for the search <Input> component","optional":true},"round":{"value":"boolean","optional":true},"trigger":{"value":"ReactNode","comment":"Custom trigger element","optional":true},"triggerProps":{"value":"any","optional":true},"popupProps":{"value":"SelectPopupProps","optional":true},"hideRequiredStar":{"value":"boolean","comment":"Hide the required star symbol","optional":true}},"State":{"kind":"type","isFocused":{"value":"boolean"},"isOpen":{"value":"boolean"},"isSelectionLimited":{"value":"boolean"},"selected":{"value":"Selected"},"expanded":{"value":"{ [id: string]: boolean }"},"searchVal":{"value":"string"},"options":{"value":"Option[]"},"labelClipPath":{"value":"string"},"optionsUpdated":{"value":"number"},"focusedItemIndex":{"value":"number"}},"OptionElemProps":{"kind":"type","ext":["HTMLAttributes<HTMLDivElement>"],"className":{"value":"string"},"key":{"value":"Option['id']"},"ref":{"value":"RefObject<HTMLDivElement>","optional":true}}},"Spinner":{"Props":{"kind":"type","ext":["ComponentType"],"size":{"value":"Size","optional":true}}},"Table":{"Column":{"kind":"type","id":{"value":"string","comment":"Unique id of the column"},"label":{"value":"ReactNode","comment":"Label of the column"},"sticky":{"value":"boolean","comment":"Whether the column is sticky","optional":true},"dataField":{"value":"string","comment":"Name of the field in the Data object to render column content.\n\nIf not specified, the `id` field will be used by default.","optional":true},"render":{"value":"(itemData: Data) => ReactNode","comment":"Function that takes in a Data object and returns a ReactNode representing the content to be displayed in this column for that row.\n\nIf not specified, the default behavior is to display the value of the corresponding dataField property.","optional":true}},"Data":{"value":"{ id: string } & any","isPlain":true},"Props":{"kind":"type","ext":["ComponentType"],"columns":{"value":"Column[]","comment":"Config that describes the structure of the table"},"data":{"value":"Data[]","comment":"Actual content of the table"},"isLoading":{"value":"boolean","comment":"Whether the table data is in loading state","optional":true},"loadingText":{"value":"ReactNode","comment":"Text to display when the table data is in loading state","optional":true},"blur":{"value":"boolean","comment":"Applies a blur effect to the background","optional":true}}},"Tabs":{"ID":{"value":"string | number","isPlain":true},"Item":{"kind":"type","ext":["ButtonProps"],"id":{"value":"ID"},"label":{"value":"string"},"content":{"value":"React.ReactNode | (() => React.ReactNode)","enum":["React.ReactNode","(() => React.ReactNode);"]},"contentClassName":{"value":"string","optional":true},"forceRender":{"value":"boolean","optional":true},"onClick":{"value":"(e: MouseEvent) => boolean | void","enum":["(e: MouseEvent) => boolean","void;"],"optional":true}},"RenderProps":{"kind":"type","tabs":{"value":"React.ReactNode"},"content":{"value":"React.ReactNode"}},"Props":{"kind":"type","size":{"value":"Size","optional":true},"className":{"value":"string","optional":true},"tabsWrapperClassName":{"value":"string","optional":true},"tabsClassName":{"value":"string","optional":true},"contentClassName":{"value":"string","optional":true},"items":{"value":"Item[]"},"hideTabsIfSingle":{"value":"boolean","optional":true},"allowEmpty":{"value":"boolean","comment":"Allow to unselect tab, so no content will be rendered","optional":true},"activeId":{"value":"ID","optional":true},"onChange":{"value":"(id: ID) => void"},"renderAll":{"value":"boolean","optional":true},"children":{"value":"(props: RenderProps) => React.ReactNode","optional":true}}},"Theme":{"ThemeConfig":{"kind":"type","ext":["Record<string, string>"],"colors":{"value":"Record<string, string>","optional":true}},"Props":{"kind":"type","config":{"value":"ThemeConfig","comment":"Theme configuration","optional":true}}},"Toggle":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLInputElement>"],"label":{"value":"ReactNode","comment":"Used to associate the toggle with its label","optional":true},"checked":{"value":"boolean","comment":"Whether the toggle is currently selected","optional":true},"disabled":{"value":"boolean","comment":"Whether the toggle is disabled","optional":true},"error":{"value":"string | boolean","comment":"Defines an error message or error status for the toggle","enum":["string","boolean;"],"optional":true},"size":{"value":"Size","comment":"Size of the toggle","optional":true},"variant":{"value":"'default' | 'outlined'","comment":"Variant style for the toggle","enum":["'default'","'outlined';"],"optional":true}}},"Virtualized":{"IndexesType":{"kind":"type","first":{"value":"number"},"last":{"value":"number"}},"ItemProps":{"kind":"type","ext":["ComponentType"],"style":{"value":"any","comment":"inline style to be applied to the item container.","optional":true},"key":{"value":"number"}},"DefaultProps":{"kind":"type","overlapCount":{"value":"number"}},"State":{"kind":"type","ext":["IndexesType"],"id":{"value":"string"},"height":{"value":"number"},"isFreezed":{"value":"boolean"}},"RenderProps":{"kind":"type","ext":["ComponentType"],"state":{"value":"IndexesType & { height: number }"},"items":{"value":"ReactNode[]"},"onScroll":{"value":"(e: MouseEvent) => void"}},"GetItemPropsParams":{"kind":"type","index":{"value":"number"},"offsetBefore":{"value":"number","optional":true},"offsetAfter":{"value":"number","optional":true}},"ScrollCallbackState":{"kind":"type","ext":["IndexesType"],"scrollTop":{"value":"number"}},"Props":{"kind":"type","ext":["Readonly<DefaultProps>"],"id":{"value":"any","comment":"change to fire render","optional":true},"wrapElem":{"value":"Element | null","comment":"DOM element that wraps the list of items.\n\nThis is used to calculate the viewport dimensions and to handle scroll events.","enum":["Element","null;"]},"itemHeight":{"value":"number","comment":"height of each item in the list."},"itemsCount":{"value":"number","comment":"Number of items to be rendered in the list."},"totalCount":{"value":"number","comment":"total number of items in the list"},"overlapCount":{"value":"number","comment":"number of items to be rendered before and after the visible viewport.","optional":true},"pageSize":{"value":"number","comment":"number of items to be rendered at a time.\n\nused to determine when the list has been scrolled to the end.","optional":true},"offsetBefore":{"value":"number","comment":"number of items to be rendered before the visible viewport.","optional":true},"offsetAfter":{"value":"number","comment":"number of items to be rendered after the visible viewport.","optional":true},"initialScrollTop":{"value":"number","comment":"initial scroll position of the list.","optional":true},"scrollTop":{"value":"number","comment":"current scroll position of the list.","optional":true},"onScroll":{"value":"(args: ScrollCallbackState) => void","comment":"called when the list is scrolled.","optional":true},"onScrollEnd":{"value":"() => void","comment":"called when the list has been scrolled to the end.","optional":true},"children":{"value":"(props: RenderProps) => ReactNode","comment":"function that renders the list of items"},"renderItem":{"value":"(props: ItemProps) => ReactElement","comment":"function that renders an individual item in the list"},"getItemProps":{"value":"(params: GetItemPropsParams) => Record<string, any>","comment":"function that returns an object containing any additional props to be passed to each item in the list, based on the item index and any offsets."}},"ViewProps":{"value":"Omit<Props, 'children' | 'wrapElem' | 'getItemProps'>","isPlain":true}}}